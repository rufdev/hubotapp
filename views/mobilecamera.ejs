<div class="container-fluid text-center mt-5">
  <h1>Builtin Camera</h1>
  <div class="row">
    <div class="col-md-12">
      <img
        id="stream"
        style="
          display: block;
          -webkit-user-select: none;
          margin: auto;
          background-color: hsl(0, 0%, 25%);
        "
      />
    </div>
    <div class="col-md-12">
      <div id="prediction" class="col-md-12 d-none">
        <h4>Prediction:</h4>
        <div class="progress">
          <div
            id="prediction-bar-cat"
            class="progress-bar"
            role="progressbar"
            style="width: 0%"
            aria-valuenow="0"
            aria-valuemin="0"
            aria-valuemax="100"
          ></div>
          <div
            id="prediction-bar-dog"
            class="progress-bar bg-danger"
            role="progressbar"
            style="width: 0%"
            aria-valuenow="0"
            aria-valuemin="0"
            aria-valuemax="100"
          ></div>
        </div>
        <p id="prediction-text"></p>
      </div>
      <!-- <button id="resetBtn" class="btn btn-primary mt-3 d-none">
        Reset Stream
      </button> -->
      <!-- <button id="captureBtn" class="btn btn-primary mt-3">
        Capture Image ESP32
      </button> -->
    </div>
  </div>
  <div class="row">
    <div class="col-md-12 mx-auto">
      <video id="videoElement" width="640" height="480" class="mx-auto"></video>
      <br />
      <button id="captureButton">Capture</button>
    </div>
  </div>
</div>

<!-- Latest compiled and minified JavaScript -->
<script
  src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
  integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
  crossorigin="anonymous"
></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script>
  const predictiondisplay = document.getElementById("prediction");
  const progressBarcat = document.getElementById("prediction-bar-cat");
  const progressBardog = document.getElementById("prediction-bar-dog");
  const predictionText = document.getElementById("prediction-text");

 
  const videoElement = document.getElementById("videoElement");
  const captureButton = document.getElementById("captureButton");
  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    // Constraints to specify the camera facing mode
    const constraints = { video: { facingMode: "environment" } };
    // Access the user's media devices and get the camera stream
    navigator.mediaDevices
      .getUserMedia(constraints)
      .then((stream) => {
        var video = document.createElement('video');
        // Create a video element to display the camera stream
        videoElement.srcObject = stream;
        videoElement.play();

        // Append the video element to the DOM or perform any other desired operations
        document.body.appendChild(video);
      })
      .catch((error) => {
        console.error("Error accessing camera:", error);
      });
  } else {
    navigator.mediaDevices
      .getUserMedia({ video: true })
      .then((stream) => {
        videoElement.srcObject = stream;
        videoElement.play();
      })
      .catch((error) => {
        console.error("Error accessing camera:", error);
      });
  }

  captureButton.addEventListener("click", () => {
    const canvas = document.createElement("canvas");
    const context = canvas.getContext("2d");

    canvas.width = videoElement.videoWidth;
    canvas.height = videoElement.videoHeight;

    context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);

    const imageDataURL = canvas.toDataURL("image/jpeg");

    axios
      .post("/predictmobilecam", { image: imageDataURL })
      .then((response) => {
        // Handle the response from the server
        stream.src = response.data.url;
        const prediction = response.data.prediction;
        const predictioncat = prediction[0];
        const predictiondog = prediction[1];

        stream.onload = () => {
          predictiondisplay.classList.remove("d-none");
          // resetBtn.classList.remove("d-none");

          const predictionValue = Math.max(predictioncat, predictiondog);

          progressBarcat.style.width = `${predictioncat * 100}%`;
          progressBardog.style.width = `${predictiondog * 100}%`;
          const iscat = predictioncat > predictiondog;
          predictionText.textContent = `This image has a ${Math.round(
            predictionValue * 100
          )}% chance of being a ${iscat ? "cat" : "dog"}.`;
        };
      })
      .catch((error) => {
        console.error("Error sending image to server:", error);
      });
  });
</script>
